import{_ as e,p as a,q as i,w as r,J as t}from"./framework-4a7f5a2b.js";const s={},u=t('<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景:</h2><blockquote><p>vite2 版本更新，尝试将原有项目（Vue@2.6.12 + webpack@4.5.0）迁移至 vite 构建。</p></blockquote><ul><li><s>Vite2 的支持条件是 Vue3.0 及以上版本</s> （错误观点）。</li><li>需要将 webpack 配置项剔除，替换 Vite 构建。</li></ul><h2 id="依赖包配置报错" tabindex="-1"><a class="header-anchor" href="#依赖包配置报错" aria-hidden="true">#</a> 依赖包配置报错</h2><p>需将依赖包对应关系整理好，否则会缺少相关依赖，导致报错。<br> 如，node-sass 依赖 可能会配合 sass-loader 使用，因此需要成对加载。</p><h2 id="依赖与-vue-版本兼容问题考虑" tabindex="-1"><a class="header-anchor" href="#依赖与-vue-版本兼容问题考虑" aria-hidden="true">#</a> 依赖与 vue 版本兼容问题考虑</h2><p>举个我经常犯错误的例子，node-sass 加载时，因为 vue（2.6.12） 的版本限制，无法使用最新 node-sass@5.0+。<br> 需要将 node-sass 版本限制在4.x，否则找不到必要文件，构建时报错。 这里要注意，很多依赖提示更新较新的版本，但是最新的版本又和当前的 vue 版本不兼容，这样就需要择需而定，不要冒味升级。</p><blockquote><p>这就引发了下一个问题：假如我把 vue2 升级到 vue3，岂不就可以装载最新版本的相关依赖了？？</p></blockquote><h2 id="错误思路-vue2-升级到-vue3-达成-vite2-必要条件" tabindex="-1"><a class="header-anchor" href="#错误思路-vue2-升级到-vue3-达成-vite2-必要条件" aria-hidden="true">#</a> （错误思路）~~vue2 升级到 vue3，达成 vite2 必要条件？ ~~</h2><p>这是一个看似很简单的处理办法。upgrade 就完事…？ 实际我们忽略了 vue2 升级 vue3 的难处。在尤大发布 3.0 以来，vue3从来就不是一个简单的升级就完事的任务。 vue2 ⬆️ Vue3 的事实是：</p><ul><li>生命周期函数改变，如 created() 变成了 setup()。</li><li>运行依赖插件版本需对应升级。</li><li>其它部分调整。</li><li>…… （请自行翻阅相关资料）😮‍💨</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>由此可见，项目迁移或版本升级不是一个说来就来的事，既需要深思熟虑决定，又要打本地分支做充分试验。在做这些事的前提更应熟悉每个依赖版本的变化，避免因小失大，造成不可挽回的事件。</p>',13);function d(l,h){return a(),i("div",null,[r(" more "),u])}const c=e(s,[["render",d],["__file","21062401.html.vue"]]);export{c as default};
