import{_ as e,p as t,q as p,s,G as n,t as o,J as c,n as i}from"./framework-4a7f5a2b.js";const r={},l={href:"https://www.axios-http.cn/docs/interceptors",target:"_blank",rel:"noopener noreferrer"},u=c(`<p>拦截器，顾名思义就是在接口请求之前拦截，根据不同的业务场景做出不同的反应。</p><p>拦截分两种：请求拦截和响应拦截。</p><h2 id="请求拦截-interceptors-request" tabindex="-1"><a class="header-anchor" href="#请求拦截-interceptors-request" aria-hidden="true">#</a> 请求拦截 interceptors.request</h2><p>请求拦截指的是还未发出请求，在请求之前问询有什么特殊要求，特殊配置。</p><ul><li>一般我们会配置默认 header，常用场景是 token 鉴权登录和免重复登录。</li><li>也可以根据不同 url 地址配置不同的默认参数。</li><li>可以根据状态码返回统一的状态处理结果。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.在特殊要求接口配置特殊参数，比如登录前</span>
    config<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/api/token&#39;</span> <span class="token operator">&amp;&amp;</span> 
    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token punctuation">(</span>你的密钥<span class="token punctuation">)</span>
    <span class="token comment">// 2.在登录后发送请求之前配置 token</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token punctuation">(</span>获取你的 token<span class="token punctuation">)</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token punctuation">(</span>你的 token 密钥格式<span class="token punctuation">)</span>
    <span class="token comment">// 配置完 return</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token comment">// 或 Promise.resolve(config);</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对请求错误做些什么 </span>
    <span class="token comment">// 这里极少情况会进来，暂时没有找到主动触发的方法</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应拦截-interceptors-response" tabindex="-1"><a class="header-anchor" href="#响应拦截-interceptors-response" aria-hidden="true">#</a> 响应拦截 interceptors.response</h2><p>响应拦截指的是已发出请求，在请求之后对响应做出不同不处理。</p><ul><li>一般会统一处理状态码，比如 404，500之后提示用户当前请求接口为什么没成功。</li><li>也存在后台给你返回 200状态的错误提示，比如“当前账户状态异常”之类的业务场景。</li><li>断网的情况也可以在这里配置。有可能用户在断网不知情的情况下，点击按钮请求而得不到任何反馈。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. http 状态码是 2xx 会进来这里，response 的数据结构如下：response-200</span>
  <span class="token comment">// 2. 可通过 validateStatus 配置进到 success callback 的 http status，例如: </span>
  <span class="token comment">//    function (status) {</span>
  <span class="token comment">//      return status &gt;= 200 &amp;&amp; status &lt;= 500; // 当 http status 属于定义的范围内，都会进到 success callback</span>
  <span class="token comment">//    }</span>
  <span class="token keyword">return</span> response<span class="token punctuation">;</span> <span class="token comment">// 或 return Promise.resvole(response);</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. http 状态码非2开头（没有额外定义 validateStatus）的都会进来这里，如 404, 500 等，error 的数据结构如下：error-400、error-500</span>
  <span class="token comment">// 2. 取消请求也会进入这里，可以用 axios.isCancel(error) 来判断是否是取消请求，error 的数据结构如下：cancel-error</span>
  <span class="token comment">// 3. 请求运行有异常也会进入这里，如故意将 headers 写错：axios.defaults.headers = &#39;123&#39;</span>
  <span class="token comment">// 4. 断网，error 的数据结构如下：network-error</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>请求拦截的目的是：对应不同的接口做出自由度更高的处理。</p><p>响应拦截的目的是：对统一性的异常状态进行即时响应，提高用户体验。</p>`,13);function d(k,m){const a=i("ExternalLinkIcon");return t(),p("div",null,[s("p",null,[n("官方文档中对 "),s("a",l,[n("axios 拦截器"),o(a)]),n("已经讲的很清楚了，这里讲一下在项目优化上的一些见解。")]),u])}const h=e(r,[["render",d],["__file","22101803.html.vue"]]);export{h as default};
