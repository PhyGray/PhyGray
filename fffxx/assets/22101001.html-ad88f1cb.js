import{_ as o,p as a,q as r,w as p,s as e,G as t,t as s,J as c,n as h}from"./framework-4a7f5a2b.js";const d={},l=e("h2",{id:"简述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简述","aria-hidden":"true"},"#"),t(" 简述")],-1),i=e("p",null,"这是个持续讨论的话题。",-1),_=e("p",null,"最开始的时候，安卓将「确定」放在左边，苹果则放在右边；后来安卓妥协。",-1),u=e("p",null,"个人觉的比较有意思的取巧解释：「确定」 同「是」同「OK」同「All right」，于是就理直气壮放在右边（hh..）。",-1),f=e("p",null,"读了篇相关文章，大概了解各平台的演变情景。",-1),m={href:"https://www.zhihu.com/question/20664700/answer/15874388",target:"_blank",rel:"noopener noreferrer"},g=c('<h2 id="情景举例" tabindex="-1"><a class="header-anchor" href="#情景举例" aria-hidden="true">#</a> 情景举例</h2><p>个人理解，无论「确定」是放在左边也好，右边也罢，都应该建立在平衡用户体验和业务需求的前提上。</p><p>但有的时候用户体验和业务需求是互斥的。</p><blockquote><p>举个例子：APP上有个订阅通知请求用户订阅。</p></blockquote><p><strong>「确定」放在左边</strong>：</p><p>在业务角度上，是希望用户直接去点「确定」的，最直观的方式是放在左边，根据用户的一般行为习惯就会驱使其点「确定」，提高了便捷性和体验；</p><p>完整视觉过程为：「确定」-&gt;「取消」-&gt;「确定✅」</p><p>但是在一些不愿被打扰用户的角度来看，他们更希望快速的选择「取消」，于是对于这部分人来讲，他的行为习惯变成了由「确定」-&gt;「取消」，对于他们来讲是体验不好的。</p><p>完整视觉过程为：「确定」-&gt;「取消✅」</p><p><strong>反之「确定」放在右边：</strong></p><p>业务角度视觉过程变成 「取消」-&gt;「确定✅」</p><p>用户角度视觉过程变成 「取消✅」</p><p>这样最极限的优化了体验性。</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>有人说了，上面例子放在左边，直接一步点「确定」不就结束了？</p><p>事实上，我们确实是可以一步完成闭环。这是因为我们默许了另外一个选项是「取消」。</p><p>但是对于大部分人大多情况来讲，他们都会去看另外的选项，来对比第一个选项是否是自己真的想按的那个。这属于选项的不稳定性，即使你明知另外一个不是你想选的，但还是会情不自禁的去确认对比，万一第二按钮不是「取消」呢？</p><p>我们应该遵循并考究人的逻辑思路，而不是行为思路。严谨一点来讲，我们需要遍历选项再去做出正确的选择，这才是科学的解释。</p>',18);function x(k,b){const n=h("ExternalLinkIcon");return a(),r("div",null,[p(" more "),l,i,_,u,f,e("p",null,[e("a",m,[t("在 App 里，遇到告警或者提示用户，「确定」按钮应该放在左边还是右边？"),s(n)])]),g])}const N=o(d,[["render",x],["__file","22101001.html.vue"]]);export{N as default};
